// xs_begin
// arg : { var = 'seed'	name = 'Seed'	value = '2048' range = '1 2147483648' step = '1' precision = '0' }
// arg : { var = 'altitude'	name = 'Altitude'	value = '64' range = '0 256' step = '1' precision = '0' }
// arg : { var = 'map_scale'	name = 'Map Scale'	value = '192' range = '0 2048' step = '1' precision = '0' }
// arg : { var = 'v_color'	name = 'Color'	value = '1' range = '0 255'	step = '1' precision = '0' }
// arg : { var = 'air_color'	name = 'Air Color'	value = '-1' range = '-1 255'	step = '1' precision = '0' }
// arg : { var = 'x_shifting'	name = 'X-Offset'	value = '0' range = '-2147483648 2147483648'	step = '1' precision = '0' }
// arg : { var = 'y_shifting'	name = 'Y-Offset'	value = '0' range = '-2147483648 2147483648'	step = '1' precision = '0' }
// arg : { var = 'z_shifting'	name = 'Z-Offset'	value = '0' range = '-2147483648 2147483648'	step = '1' precision = '0' }
// arg : { var = 'strength_1'	name = 'Layer 1'	value = '1' range = '-10 10'	step = '0.001' precision = '4' }
// arg : { var = 'strength_2'	name = 'Layer 2'	value = '0.25' range = '-10 10'	step = '0.001' precision = '4' }
// arg : { var = 'strength_3'	name = 'Layer 3'	value = '0.0625' range = '-10 10'	step = '0.001' precision = '4' }
// xs_end

// Terrain Generator 2
// MIT License
// Copyright (c) 2021 Tianyu Huang

int height(vec3 v){
  for(int i=int(iVolumeSize.z-1.);i>=0;--i){
    if(voxel(vec3(v.x,v.y,float(i)))!=0.){
      return i;
    }
  }
  return 0;
}

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
  return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v)
  {
  const vec4 C = vec4(0.211324865405187,
                      0.366025403784439,
                     -0.577350269189626,
                      0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod289(i);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));
  p=permute(p+vec3(seed));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

float map(vec3 v) {
  float vheight=float(height(v));
  if(vheight==0.){
    return voxel(v);
  }
  float height=snoise(vec2((v.x+x_shifting)/map_scale,(v.y+y_shifting)/map_scale))*strength_1
  +snoise(vec2((v.x+x_shifting)/(0.25*map_scale),(v.y+y_shifting)/(0.25*map_scale)))*strength_2
  +snoise(vec2((v.x+x_shifting)/(0.0625*map_scale),(v.y+y_shifting)/(0.0625*map_scale)))*strength_3;
  height=(0.5*atan(height)+0.5)*altitude;
  if(v.z<=vheight+height+z_shifting&&v.z>vheight){
    return v_color;
  }
  if(air_color==-1.)return voxel(v);
  return air_color;
}