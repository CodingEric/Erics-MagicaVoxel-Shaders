/*
Via Github@CodingEric
If you like this project, give it a star!
The code is written in C, but Magicavoxel requires its format to be txt (so weird..).
Cube Fill Shader for Magicavoxel
Command-line usage:
 1) 'xs cubefill [mode (0 for filling, 1 for frame)] [point1_X] [point1_Y] [point1_Z] [point2_X] [point2_Y] [point2_Z] [voxel color]'
 2) 'xs cubefill [mode (0 for filling, 1 for frame)] [pointX] [pointY] [pointZ] [length of a side] [voxel color]'
(Each parameter is required or the code won't work correctly.)
e.g.
 1) xs cubefill 1 1 1 1 50 50 30 216 - Draw the edge frame of a red cuboid between the coordinates (1,1,1) and (7,2,2).
 2) xs cubefill 0 50 50 50 10 216 - Take coordinates (50,50,50) as the center, create a red cube with a side length of 10 units.
MIT License
*/

float map(vec3 v){
    if(iArgs[6]!=0.){
        if(iArgs[0]==0&&((v.x>=iArgs[1]&&v.x<=iArgs[4]||v.x>=iArgs[4]&&v.x<=iArgs[1])&&(v.y>=iArgs[2]&&v.y<=iArgs[5]||v.y>=iArgs[5]&&v.y<=iArgs[2])&&(v.z>=iArgs[3]&&v.z<=iArgs[6]||v.z>=iArgs[6]&&v.z<=iArgs[3]))){
            return iArgs[7];
        }
        else if(iArgs[0]==1&&(((v.x==iArgs[1]||v.x==iArgs[4])&&(v.y==iArgs[5]||v.y==iArgs[2])&&(v.z<=iArgs[6]&&v.z>=iArgs[3]||v.z<=iArgs[3]&&v.z>=iArgs[6]))||((v.z==iArgs[3]||v.z==iArgs[6])&&(v.y==iArgs[5]||v.y==iArgs[2])&&(v.x<=iArgs[4]&&v.x>=iArgs[1]||v.x<=iArgs[1]&&v.x>=iArgs[4]))||((v.z==iArgs[3]||v.z==iArgs[6])&&(v.x==iArgs[4]||v.x==iArgs[1])&&(v.y<=iArgs[5]&&v.y>=iArgs[2]||v.y<=iArgs[2]&&v.y>=iArgs[5])))){
            return iArgs[7];
        }
        else{
            return voxel(v);
        }
    }
    else{
        float cte;
        float cte1=-1.;
        float a3=iArgs[4];
        float p1X,p1Y,p1Z,p2X,p2Y,p2Z;
        if(int(a3)&1){
            cte=(a3-1.)/2.;
            cte1+=a3-cte;
            p1X=iArgs[1]-cte;
            p1Y=iArgs[2]-cte;
            p1Z=iArgs[3]-cte;
            p2X=iArgs[1]+cte1;
            p2Y=iArgs[2]+cte1;
            p2Z=iArgs[3]+cte1;
        }
        else{
            cte=a3/2.;
            cte1+=a3/2;
            p1X=iArgs[1]-cte;
            p1Y=iArgs[2]-cte;
            p1Z=iArgs[3]-cte;
            p2X=iArgs[1]+cte1;
            p2Y=iArgs[2]+cte1;
            p2Z=iArgs[3]+cte1;
        }
        if(iArgs[0]==0&&((v.x>=p1X&&v.x<=p2X||v.x>=p2X&&v.x<=p1X)&&(v.y>=p1Y&&v.y<=p2Y||v.y>=p2Y&&v.y<=p1Y)&&(v.z>=p1Z&&v.z<=p2Z||v.z>=p2Z&&v.z<=p1Z))){
            return iArgs[5];
        }
        else if(iArgs[0]==1&&(((v.x==p1X||v.x==p2X)&&(v.y==p2Y||v.y==p1Y)&&(v.z<=p2Z&&v.z>=p1Z||v.z<=p1Z&&v.z>=p2Z))||((v.z==p1Z||v.z==p2Z)&&(v.y==p2Y||v.y==p1Y)&&(v.x<=p2X&&v.x>=p1X||v.x<=p1X&&v.x>=p2X))||((v.z==p1Z||v.z==p2Z)&&(v.x==p2X||v.x==p1X)&&(v.y<=p2Y&&v.y>=p1Y||v.y<=p1Y&&v.y>=p2Y)))){
            return iArgs[5];
        }
        else{
            return voxel(v);
        }
    }
}