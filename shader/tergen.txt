/*
Via Github@CodingEric
If you like this project, give it a star!
GL Shading Language.
Terrain Generator Shader for Magicavoxel
Command-line usage: 'xs tergen [seed] [altitude] [noise-scale] [voxel-color] [void-voxel-color (-1 for not emptying the scene)] [vertical-shifting] [x-shifting] [y-shifting]'
e.g. xs tergen 19260817 40 90 1 -1 10 -50 -10
It is recommended that you set the scene size to 126x126x126 for the best view.
Noise generation algorithm provider: Copyright (C) 2011 Ashima Arts. All rights reserved.
MIT License
*/

float seed;

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
  return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v)
  {
  const vec4 C = vec4(0.211324865405187,
                      0.366025403784439,
                     -0.577350269189626,
                      0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod289(i);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));
  p=permute(p+vec3(seed));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

float map(vec3 v) {
  float yShift=iArgs[7];
  float xShift=iArgs[6];
  float verticalShift=iArgs[5];
  float vvcolor=iArgs[4];
  float vcolor=iArgs[3];
  float mapScale=iArgs[2];
  seed=iArgs[0];
  float height=snoise(vec2((v.x+xShift)/mapScale,(v.y+yShift)/mapScale))
  +snoise(vec2((v.x+xShift)/(0.25*mapScale),(v.y+yShift)/(0.25*mapScale)))*0.125;
  +snoise(vec2((v.x+xShift)/(0.125*mapScale),(v.y+yShift)/(0.125*mapScale)))*0.075;
  height=pow(0.4,height)*iArgs[1];
  if(v.z<=height+verticalShift){
    return vcolor;
  }
  if(vvcolor==-1.)return voxel(v);
  return vvcolor;
}